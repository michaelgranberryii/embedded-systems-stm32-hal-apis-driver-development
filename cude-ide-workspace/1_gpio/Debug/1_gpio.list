
1_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000854  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d8  080009d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009d8  080009d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080009d8  080009d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d8  080009d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080009e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002551  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000962  00000000  00000000  000225d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000318  00000000  00000000  00022f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000022a  00000000  00000000  00023250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002391f  00000000  00000000  0002347a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003124  00000000  00000000  00046d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd48e  00000000  00000000  00049ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b38  00000000  00000000  0012734c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00127e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080009c0 	.word	0x080009c0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080009c0 	.word	0x080009c0

080001c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ce:	2003      	movs	r0, #3
 80001d0:	f000 f91a 	bl	8000408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d4:	200f      	movs	r0, #15
 80001d6:	f000 f815 	bl	8000204 <HAL_InitTick>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d002      	beq.n	80001e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e0:	2301      	movs	r3, #1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	e001      	b.n	80001ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001e6:	f000 f805 	bl	80001f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
	...

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d023      	beq.n	8000260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <HAL_InitTick+0x70>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <HAL_InitTick+0x6c>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f911 	bl	8000456 <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10f      	bne.n	800025a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	d809      	bhi.n	8000254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000240:	2200      	movs	r2, #0
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 f8e9 	bl	800041e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800024c:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <HAL_InitTick+0x74>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	e007      	b.n	8000264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
 8000258:	e004      	b.n	8000264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800025a:	2301      	movs	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	e001      	b.n	8000264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000264:	7bfb      	ldrb	r3, [r7, #15]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000004 	.word	0x20000004
 8000274:	20000008 	.word	0x20000008
 8000278:	20000000 	.word	0x20000000

0800027c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_IncTick+0x20>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_IncTick+0x24>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4413      	add	r3, r2
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <HAL_IncTick+0x24>)
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	20000028 	.word	0x20000028

080002a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	db0a      	blt.n	8000332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	490c      	ldr	r1, [pc, #48]	; (8000354 <__NVIC_SetPriority+0x4c>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	440b      	add	r3, r1
 800032c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000330:	e00a      	b.n	8000348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <__NVIC_SetPriority+0x50>)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	3b04      	subs	r3, #4
 8000340:	0112      	lsls	r2, r2, #4
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	440b      	add	r3, r1
 8000346:	761a      	strb	r2, [r3, #24]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035c:	b480      	push	{r7}
 800035e:	b089      	sub	sp, #36	; 0x24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	f1c3 0307 	rsb	r3, r3, #7
 8000376:	2b04      	cmp	r3, #4
 8000378:	bf28      	it	cs
 800037a:	2304      	movcs	r3, #4
 800037c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3304      	adds	r3, #4
 8000382:	2b06      	cmp	r3, #6
 8000384:	d902      	bls.n	800038c <NVIC_EncodePriority+0x30>
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3b03      	subs	r3, #3
 800038a:	e000      	b.n	800038e <NVIC_EncodePriority+0x32>
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43da      	mvns	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	401a      	ands	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	43d9      	mvns	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	4313      	orrs	r3, r2
         );
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3724      	adds	r7, #36	; 0x24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d4:	d301      	bcc.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e00f      	b.n	80003fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <SysTick_Config+0x40>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3b01      	subs	r3, #1
 80003e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	210f      	movs	r1, #15
 80003e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003e8:	f7ff ff8e 	bl	8000308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <SysTick_Config+0x40>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <SysTick_Config+0x40>)
 80003f4:	2207      	movs	r2, #7
 80003f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	e000e010 	.word	0xe000e010

08000408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff ff47 	bl	80002a4 <__NVIC_SetPriorityGrouping>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b086      	sub	sp, #24
 8000422:	af00      	add	r7, sp, #0
 8000424:	4603      	mov	r3, r0
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000430:	f7ff ff5c 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	68b9      	ldr	r1, [r7, #8]
 800043a:	6978      	ldr	r0, [r7, #20]
 800043c:	f7ff ff8e 	bl	800035c <NVIC_EncodePriority>
 8000440:	4602      	mov	r2, r0
 8000442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000446:	4611      	mov	r1, r2
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff5d 	bl	8000308 <__NVIC_SetPriority>
}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffb0 	bl	80003c4 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800047e:	e17f      	b.n	8000780 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	2101      	movs	r1, #1
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2b00      	cmp	r3, #0
 8000494:	f000 8171 	beq.w	800077a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 0303 	and.w	r3, r3, #3
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d005      	beq.n	80004b0 <HAL_GPIO_Init+0x40>
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d130      	bne.n	8000512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	2203      	movs	r2, #3
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	43db      	mvns	r3, r3
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	4013      	ands	r3, r2
 80004c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	693a      	ldr	r2, [r7, #16]
 80004de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80004e6:	2201      	movs	r2, #1
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	43db      	mvns	r3, r3
 80004f0:	693a      	ldr	r2, [r7, #16]
 80004f2:	4013      	ands	r3, r2
 80004f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	091b      	lsrs	r3, r3, #4
 80004fc:	f003 0201 	and.w	r2, r3, #1
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	4313      	orrs	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	f003 0303 	and.w	r3, r3, #3
 800051a:	2b03      	cmp	r3, #3
 800051c:	d118      	bne.n	8000550 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000524:	2201      	movs	r2, #1
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	4013      	ands	r3, r2
 8000532:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	08db      	lsrs	r3, r3, #3
 800053a:	f003 0201 	and.w	r2, r3, #1
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	4313      	orrs	r3, r2
 8000548:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 0303 	and.w	r3, r3, #3
 8000558:	2b03      	cmp	r3, #3
 800055a:	d017      	beq.n	800058c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2203      	movs	r2, #3
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	4013      	ands	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	4313      	orrs	r3, r2
 8000584:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	2b02      	cmp	r3, #2
 8000596:	d123      	bne.n	80005e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	08da      	lsrs	r2, r3, #3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3208      	adds	r2, #8
 80005a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f003 0307 	and.w	r3, r3, #7
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	220f      	movs	r2, #15
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	691a      	ldr	r2, [r3, #16]
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	08da      	lsrs	r2, r3, #3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3208      	adds	r2, #8
 80005da:	6939      	ldr	r1, [r7, #16]
 80005dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2203      	movs	r2, #3
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f003 0203 	and.w	r2, r3, #3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	693a      	ldr	r2, [r7, #16]
 800060a:	4313      	orrs	r3, r2
 800060c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 80ac 	beq.w	800077a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b5f      	ldr	r3, [pc, #380]	; (80007a0 <HAL_GPIO_Init+0x330>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000626:	4a5e      	ldr	r2, [pc, #376]	; (80007a0 <HAL_GPIO_Init+0x330>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6613      	str	r3, [r2, #96]	; 0x60
 800062e:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <HAL_GPIO_Init+0x330>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800063a:	4a5a      	ldr	r2, [pc, #360]	; (80007a4 <HAL_GPIO_Init+0x334>)
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	3302      	adds	r3, #2
 8000642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000646:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	220f      	movs	r2, #15
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	693a      	ldr	r2, [r7, #16]
 800065a:	4013      	ands	r3, r2
 800065c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d025      	beq.n	80006b2 <HAL_GPIO_Init+0x242>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a4f      	ldr	r2, [pc, #316]	; (80007a8 <HAL_GPIO_Init+0x338>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d01f      	beq.n	80006ae <HAL_GPIO_Init+0x23e>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <HAL_GPIO_Init+0x33c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d019      	beq.n	80006aa <HAL_GPIO_Init+0x23a>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <HAL_GPIO_Init+0x340>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d013      	beq.n	80006a6 <HAL_GPIO_Init+0x236>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <HAL_GPIO_Init+0x344>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d00d      	beq.n	80006a2 <HAL_GPIO_Init+0x232>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4b      	ldr	r2, [pc, #300]	; (80007b8 <HAL_GPIO_Init+0x348>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d007      	beq.n	800069e <HAL_GPIO_Init+0x22e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_GPIO_Init+0x34c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <HAL_GPIO_Init+0x22a>
 8000696:	2306      	movs	r3, #6
 8000698:	e00c      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 800069a:	2307      	movs	r3, #7
 800069c:	e00a      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 800069e:	2305      	movs	r3, #5
 80006a0:	e008      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 80006a2:	2304      	movs	r3, #4
 80006a4:	e006      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 80006a6:	2303      	movs	r3, #3
 80006a8:	e004      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 80006aa:	2302      	movs	r3, #2
 80006ac:	e002      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <HAL_GPIO_Init+0x244>
 80006b2:	2300      	movs	r3, #0
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	f002 0203 	and.w	r2, r2, #3
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	4093      	lsls	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006c4:	4937      	ldr	r1, [pc, #220]	; (80007a4 <HAL_GPIO_Init+0x334>)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	089b      	lsrs	r3, r3, #2
 80006ca:	3302      	adds	r3, #2
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <HAL_GPIO_Init+0x350>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	43db      	mvns	r3, r3
 80006dc:	693a      	ldr	r2, [r7, #16]
 80006de:	4013      	ands	r3, r2
 80006e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80006f6:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <HAL_GPIO_Init+0x350>)
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <HAL_GPIO_Init+0x350>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	43db      	mvns	r3, r3
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4313      	orrs	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <HAL_GPIO_Init+0x350>)
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <HAL_GPIO_Init+0x350>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	43db      	mvns	r3, r3
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	4013      	ands	r3, r2
 8000734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800074a:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <HAL_GPIO_Init+0x350>)
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_GPIO_Init+0x350>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	43db      	mvns	r3, r3
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	4313      	orrs	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_GPIO_Init+0x350>)
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa22 f303 	lsr.w	r3, r2, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	f47f ae78 	bne.w	8000480 <HAL_GPIO_Init+0x10>
  }
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48000800 	.word	0x48000800
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	48001000 	.word	0x48001000
 80007b8:	48001400 	.word	0x48001400
 80007bc:	48001800 	.word	0x48001800
 80007c0:	40010400 	.word	0x40010400

080007c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691a      	ldr	r2, [r3, #16]
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	4013      	ands	r3, r2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e001      	b.n	80007e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
 8000800:	4613      	mov	r3, r2
 8000802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000804:	787b      	ldrb	r3, [r7, #1]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000810:	e002      	b.n	8000818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000812:	887a      	ldrh	r2, [r7, #2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <main>:
void pc13_btn_init(void);
void pa5_led_init(void);

uint8_t btnStatus;

int main() {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

	HAL_Init();
 8000828:	f7ff fccc 	bl	80001c4 <HAL_Init>

	pc13_btn_init();
 800082c:	f000 f818 	bl	8000860 <pc13_btn_init>
	pa5_led_init();
 8000830:	f000 f842 	bl	80008b8 <pa5_led_init>

	while(1) {
		btnStatus = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <main+0x34>)
 800083a:	f7ff ffc3 	bl	80007c4 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <main+0x38>)
 8000844:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, btnStatus);
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <main+0x38>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	2120      	movs	r1, #32
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f7ff ffcf 	bl	80007f4 <HAL_GPIO_WritePin>
		btnStatus = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 8000856:	e7ed      	b.n	8000834 <main+0x10>
 8000858:	48000800 	.word	0x48000800
 800085c:	2000002c 	.word	0x2000002c

08000860 <pc13_btn_init>:
	}
}

void pc13_btn_init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStructure = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable clock
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <pc13_btn_init+0x50>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <pc13_btn_init+0x50>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <pc13_btn_init+0x50>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
	gpioInitStructure.Pin = BTN_PIN;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	607b      	str	r3, [r7, #4]
	gpioInitStructure.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
	gpioInitStructure.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
	gpioInitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BTN_PORT, &gpioInitStructure);
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <pc13_btn_init+0x54>)
 80008a4:	f7ff fde4 	bl	8000470 <HAL_GPIO_Init>
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000800 	.word	0x48000800

080008b8 <pa5_led_init>:

void pa5_led_init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStructure = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clock
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <pa5_led_init+0x5c>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	4a10      	ldr	r2, [pc, #64]	; (8000914 <pa5_led_init+0x5c>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <pa5_led_init+0x5c>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f7ff ff82 	bl	80007f4 <HAL_GPIO_WritePin>
	gpioInitStructure.Pin = LED_PIN;
 80008f0:	2320      	movs	r3, #32
 80008f2:	607b      	str	r3, [r7, #4]
	gpioInitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
	gpioInitStructure.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
	gpioInitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &gpioInitStructure);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f7ff fdb2 	bl	8000470 <HAL_GPIO_Init>
}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <SysTick_Handler>:


void SysTick_Handler(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800091c:	f7ff fcae 	bl	800027c <HAL_IncTick>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f000 f811 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff ff65 	bl	8000824 <main>

0800095a <LoopForever>:

LoopForever:
  b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000968:	080009e0 	.word	0x080009e0
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000970:	20000030 	.word	0x20000030

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4d0d      	ldr	r5, [pc, #52]	; (80009b0 <__libc_init_array+0x38>)
 800097c:	4c0d      	ldr	r4, [pc, #52]	; (80009b4 <__libc_init_array+0x3c>)
 800097e:	1b64      	subs	r4, r4, r5
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	2600      	movs	r6, #0
 8000984:	42a6      	cmp	r6, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	4d0b      	ldr	r5, [pc, #44]	; (80009b8 <__libc_init_array+0x40>)
 800098a:	4c0c      	ldr	r4, [pc, #48]	; (80009bc <__libc_init_array+0x44>)
 800098c:	f000 f818 	bl	80009c0 <_init>
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	10a4      	asrs	r4, r4, #2
 8000994:	2600      	movs	r6, #0
 8000996:	42a6      	cmp	r6, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a0:	4798      	blx	r3
 80009a2:	3601      	adds	r6, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009aa:	4798      	blx	r3
 80009ac:	3601      	adds	r6, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	080009d8 	.word	0x080009d8
 80009b4:	080009d8 	.word	0x080009d8
 80009b8:	080009d8 	.word	0x080009d8
 80009bc:	080009dc 	.word	0x080009dc

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
